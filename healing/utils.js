console.log("File: healing/utils.js");

const fs = require('fs-extra');
const path = require('path');
const config = require('../config.json');

// Get error type from filename using config.json mapping
function getErrorTypeFromFilename(filename) {
    const basename = path.basename(filename);
    
    // Check if filename exists in code_errorTypes mapping
    if (config.code_errorTypes && config.code_errorTypes[basename]) {
        return config.code_errorTypes[basename];
    }
    
    // Fallback for unmapped files
    return 'Unknown error type';
}

async function createBackup(filename) {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupDir = 'backups';
    await fs.ensureDir(backupDir);
    
    const backupPath = path.join(backupDir, `${path.basename(filename)}_${timestamp}.backup`);
    await fs.copy(filename, backupPath);
    
    console.log(`Backup created: ${backupPath}`);
    return backupPath;
}

function createPrompt(errorInfo, fileContent) {
    return `You are a code repair assistant. Fix this Node.js error:

ERROR TYPE: ${errorInfo.errorType}
ERROR MESSAGE: ${errorInfo.errorMessage}
FILE: ${errorInfo.filename}
LINE: ${errorInfo.lineNumber}

CURRENT CODE:
${fileContent}

INSTRUCTIONS: 
1. Fix the error in the code
2. Return ONLY the complete corrected file content
3. Make minimal changes to fix the error`;
}



function extractCode(aiResponse) {
    const startTag = '### CONTENT_START ###';
    const endTag = '### CONTENT_END ###';
    
    // remove string "```javascript" from the response (generated by local LLM)
    aiResponse = aiResponse.replace(/```javascript/g, '');
    aiResponse = aiResponse.replace(/```/g, '');

    const startIndex = aiResponse.indexOf(startTag);
    const endIndex = aiResponse.indexOf(endTag);
    
    if (startIndex === -1 || endIndex === -1) {
        console.error('AI response does not contain required tags');
        return null;
    }
    
    return aiResponse.substring(startIndex + startTag.length, endIndex).trim();
}



function detectAIProvider(providerKey) {
    console.log(`detectAIProvider( ${providerKey} )`);

    if (providerKey.startsWith('lms_')) {
        return { type: 'lmstudio', provider: providerKey };
    } else if (providerKey.startsWith('gemini_')) {
        return { type: 'gemini', provider: providerKey };
    } else if (providerKey.startsWith('openRouter_')) {
        return { type: 'openrouter', provider: providerKey };
    } else {
        return { type: 'unknown', provider: providerKey };
    }
}

module.exports = { createBackup, createPrompt, extractCode, detectAIProvider, getErrorTypeFromFilename };
